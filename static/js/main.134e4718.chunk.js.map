{"version":3,"sources":["utils/API.js","components/EmployeeTable.js","components/Searchbar.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","EmployeeTable","props","employees","map","e","key","id","value","src","picture","thumbnail","alt","name","first","last","email","cell","Searchbar","Form","Group","Label","for","Control","onChange","filter","target","type","placeholder","App","state","allEmployees","filteredEmployees","getUsers","API","then","res","console","log","data","results","setState","catch","err","filterUser","searchText","filtered","employee","toLowerCase","includes","this","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sUAMe,EACD,WACN,OAAOA,IAAMC,IAAI,iDCyBVC,EA9BO,SAACC,GACnB,OACI,+BACI,+BACI,4BACI,6BACA,0CACA,yCACA,qCACA,8CAIR,+BACKA,EAAMC,UAAUC,KAAI,SAACC,GAClB,OAAQ,wBAAIC,IAAKD,EAAEE,GAAGC,OAClB,4BAAI,yBAAKC,IAAKJ,EAAEK,QAAQC,UAAWC,IAAI,aAAvC,KACA,4BAAKP,EAAEQ,KAAKC,OACZ,4BAAKT,EAAEQ,KAAKE,MACZ,4BAAKV,EAAEW,OACP,4BAAKX,EAAEY,a,QCRhBC,MAZf,SAAmBhB,GACf,OACI,kBAACiB,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,CAAYC,IAAI,iBAChB,kBAACH,EAAA,EAAKI,QAAN,CAAcC,SAAU,SAACnB,GAAD,OAAOH,EAAMuB,OAAOpB,EAAEqB,OAAOlB,QAAQmB,KAAK,OAAOC,YAAY,4BC8CtFC,E,4MA9CbC,MAAQ,CACNC,aAAc,GACdC,kBAAmB,I,EAOrBC,SAAW,WACTC,IACGC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,KAAKC,SACrB,EAAKC,SAAS,CACZV,aAAcK,EAAIG,KAAKC,QACvBR,kBAAmBI,EAAIG,KAAKC,aAG/BE,OAAM,SAAAC,GAAG,OAAIN,QAAQC,IAAIK,O,EAG9BC,WAAa,SAAAC,GACX,IAAMC,EAAW,EAAKhB,MAAMC,aAAaN,QAAO,SAAAsB,GAE9C,MADc,UAAGA,EAASlC,KAAKC,MAAjB,YAA0BiC,EAASlC,KAAKE,KAAxC,YAAgDgC,EAAS/B,OAAQgC,cAClEC,SAASJ,EAAWG,kBAEnC,EAAKP,SAAS,CAAET,kBAAmBc,K,kEApBnCI,KAAKjB,a,+BAwBL,OACE,yBAAKkB,UAAU,OAEb,kDAEA,kBAAC,EAAD,CACE1B,OAAQyB,KAAKN,aAEf,kBAAC,EAAD,CACEzC,UAAW+C,KAAKpB,MAAME,yB,GAxCdoB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.134e4718.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\n\n\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\nexport default {\n    getUsers: function () {\n        return axios.get(\"https://randomuser.me/api/?results=20&nat=us\");\n    }\n};\n","import React from \"react\";\n\n\nconst EmployeeTable = (props) => {\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>First Name</th>\n                    <th>Last Name</th>\n                    <th>Email</th>\n                    <th>Phone Number</th>\n\n                </tr>\n            </thead>\n            <tbody>\n                {props.employees.map((e) => {\n                    return (<tr key={e.id.value}>\n                        <td><img src={e.picture.thumbnail} alt=\"employee\" /> </td>\n                        <td>{e.name.first}</td>\n                        <td>{e.name.last}</td>\n                        <td>{e.email}</td>\n                        <td>{e.cell}</td>\n\n                    </tr>)\n\n                })}\n            </tbody>\n        </table>\n    );\n}\n\nexport default EmployeeTable;","import React from 'react';\nimport { Form } from 'react-bootstrap';\n\nfunction Searchbar(props) {\n    return (\n        <Form>\n            <Form.Group>\n                <Form.Label for=\"exampleEmail\"></Form.Label>\n                <Form.Control onChange={(e) => props.filter(e.target.value)} type=\"text\" placeholder=\"Filter by First Name\" />\n            </Form.Group>\n        </Form>\n    )\n};\n\n\nexport default Searchbar","\nimport React, { Component } from 'react';\nimport './App.css';\nimport API from \"./utils/API\";\nimport EmployeeTable from './components/EmployeeTable';\nimport Searchbar from './components/Searchbar';\n\nclass App extends Component {\n  state = {\n    allEmployees: [],\n    filteredEmployees: []\n  }\n  // When this component mounts, search the Giphy API for pictures of kittens\n  componentDidMount() {\n    this.getUsers();\n  }\n\n  getUsers = () => {\n    API.getUsers()\n      .then(res => {\n        console.log(res.data.results);\n        this.setState({\n          allEmployees: res.data.results,\n          filteredEmployees: res.data.results\n        })\n      })\n      .catch(err => console.log(err));\n  };\n\n  filterUser = searchText => {\n    const filtered = this.state.allEmployees.filter(employee => {\n      const eText = `${employee.name.first} ${employee.name.last} ${employee.email}`.toLowerCase();\n      return eText.includes(searchText.toLowerCase());\n    });\n    this.setState({ filteredEmployees: filtered })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <h1>Employee Directory</h1>\n\n        <Searchbar\n          filter={this.filterUser}\n        />\n        <EmployeeTable\n          employees={this.state.filteredEmployees} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}